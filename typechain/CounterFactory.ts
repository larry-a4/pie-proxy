/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { Counter } from "./Counter";

export class CounterFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(): Promise<Counter> {
    return super.deploy() as Promise<Counter>;
  }
  getDeployTransaction(): UnsignedTransaction {
    return super.getDeployTransaction();
  }
  attach(address: string): Counter {
    return super.attach(address) as Counter;
  }
  connect(signer: Signer): CounterFactory {
    return super.connect(signer) as CounterFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Counter {
    return new Contract(address, _abi, signerOrProvider) as Counter;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "number",
        type: "uint256"
      }
    ],
    name: "CountedTo",
    type: "event"
  },
  {
    inputs: [],
    name: "countDown",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "countUp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "getCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];

const _bytecode =
  "0x60806040526000805534801561001457600080fd5b506104b9806100246000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630bd8599e146100465780635fcbd5b614610064578063a87d942c14610082575b600080fd5b61004e6100a0565b6040518082815260200191505060405180910390f35b61006c6101ad565b6040518082815260200191505060405180910390f35b61008a6102ba565b6040518082815260200191505060405180910390f35b60006100e36040518060400160405280601081526020017f636f756e7455703a20636f756e74203d000000000000000000000000000000008152506000546102c3565b600060016000540190506000548111610164576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f55696e74323536206f766572666c6f770000000000000000000000000000000081525060200191505060405180910390fd5b806000819055507fa501f5a8ef1a812bff54fb3642cfaec066c351af1716c48a7bdd05e0bb631e676000546040518082815260200191505060405180910390a160005491505090565b60006101f06040518060400160405280601281526020017f636f756e74446f776e3a20636f756e74203d00000000000000000000000000008152506000546102c3565b600060016000540390506000548110610271576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f55696e7432353620756e646572666c6f7700000000000000000000000000000081525060200191505060405180910390fd5b806000819055507fa501f5a8ef1a812bff54fb3642cfaec066c351af1716c48a7bdd05e0bb631e676000546040518082815260200191505060405180910390a160005491505090565b60008054905090565b60006a636f6e736f6c652e6c6f6773ffffffffffffffffffffffffffffffffffffffff1683836040516024018080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610332578082015181840152602081019050610317565b50505050905090810190601f16801561035f5780820380516001836020036101000a031916815260200191505b5093505050506040516020818303038152906040527f9710a9d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831061041557805182526020820191506020810190506020830392506103f2565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114610475576040519150601f19603f3d011682016040523d82523d6000602084013e61047a565b606091505b5050905050505056fea26469706673582212204042ab18a20f96d9cc8ee14d29a66ce9446637af523c2b9d7f428522a812563164736f6c63430006020033";
