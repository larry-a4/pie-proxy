/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IProxySideEffectsInterface extends Interface {
  functions: {
    sideEffectAfter: TypedFunctionDescription<{ encode([]: []): string }>;

    sideEffectBefore: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {};
}

export class IProxySideEffects extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IProxySideEffects;
  attach(addressOrName: string): IProxySideEffects;
  deployed(): Promise<IProxySideEffects>;

  on(event: EventFilter | string, listener: Listener): IProxySideEffects;
  once(event: EventFilter | string, listener: Listener): IProxySideEffects;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): IProxySideEffects;
  removeAllListeners(eventName: EventFilter | string): IProxySideEffects;
  removeListener(eventName: any, listener: Listener): IProxySideEffects;

  interface: IProxySideEffectsInterface;

  functions: {
    sideEffectAfter(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    sideEffectBefore(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  sideEffectAfter(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  sideEffectBefore(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    sideEffectAfter(): Promise<BigNumber>;

    sideEffectBefore(): Promise<BigNumber>;
  };
}
